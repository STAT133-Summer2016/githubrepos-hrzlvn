install.packages("dplyr")
library(dplyr)
View(nycflighjts13)
data(flights)
library(nycflights13)
data(flights)
library(nycflights13)
data(flights)
View(flights)
select(flights, arrival_delay = arrival_delay)
select(flights, arrival_delay = arr_delay)
select(flights, arrival_delay = arr_delay)
rename(flights, arrival_delay = arr_delay)
select(flights, endsWith("delay"))
select(flights, ends_with("delay"))
arrange(flights, ends_with("delay"))
arrange(flights, color)
arrange(flights, desc(color))
arrange(flights, year, month, day, hour, minute)
arrange(flights, desc(dep_delay - arr_dalay))
arrange(flights, desc(dep_delay - arr_delay))
mutate(flights, recovery_delay = arr_delay - arr_delay, speed = distance / (air_time / 60))
mutate(flights, recovery_delay = arr_delay - arr_delay, speed = distance / (air_time / 60)) %>%
tail(sort(.$speed), 5)
df2= mutate(flights, recovery_delay = arr_delay - arr_delay, speed = distance / (air_time / 60)) %>%
tail(sort(df2$speed), 5)
df2 = mutate(flights, recovery_delay = arr_delay - arr_delay, speed = distance / (air_time / 60)) %>%
tail(sort(df2$speed), 5)
(mutate(flights, recovery_delay = arr_delay - arr_delay, speed = distance / (air_time / 60)))$speed
(mutate(flights, recovery_delay = arr_delay - arr_delay, speed = distance / (air_time / 60)))$speed[1:5]
sort(mutate(flights, recovery_delay = arr_delay - arr_delay, speed = distance / (air_time / 60)))$speed)[1:5]
sort(mutate(flights, recovery_delay = arr_delay - arr_delay, speed = distance / (air_time / 60)))$speed)
sort(mutate(flights, recovery_delay = arr_delay - arr_delay, speed = distance / (air_time / 60))$speed)
head(., 5)
head(5)
head(c(1,2,3), 1)
summarise(flights, group_by(year, month, day), mean_dep_delay = mean(dep_delay) )
flights %>%
group_by(year, month, day) %>%
summarise(avg_dep_delay = mean(dep_delay))
flights %>%
group_by(dest) %>%
arrange(avg_delay = mean(dep_delay))
arrange( desc(mean(dep_delay)))
flights %>%
group_by(dest) %>%
arrange( desc(mean(dep_delay)))
flights %>%
group_by(dest) %>%
summarise(avg_dep_delay = mean(dep_delay)) %>%
arrage(desc(arr_delay)
top_n(5, arr_delay)
flights %>%
group_by(dest) %>%
summarise(avg_dep_delay = mean(dep_delay)) %>%
arrage(desc(arr_delay) %>%
top_n(5, arr_delay)
```{r, include = FALSE}
library(stringr)
library(dplyr)
library(tidyr)
```
library(stringr)
library(dplyr)
library(tidyr)
library(tidy)
install.packages("tidyr")
library(stringr)
library(dplyr)
library(tidyr)
pioneers <- c("GAUSS:1777", "BAYES:1702", "NEYMAN:1894", "LAPLACE:1749")
split_pioneers = str_split(pinoneers, ":")
split_pioneers = str_split(pioneers, ":")
split_pioneers
class(split_pioneers)
statisticians = str_to_upper(split_pioneers)
statisticians
split_pioneers = str_split(pioneers, ":")[[1]]
split_pioneers
split_pioneers = str_split(pioneers, ":")[[1]][1]
split_pioneers
split_pioneers = str_split(pioneers, ":")
for (i in split_pioneers) {
split_pioneers[i] = split_pioneers[[i]][1]
}
split_pioneers
split_pioneers = str_split(pioneers, ":")
for (i in split_pioneers) {
split_pioneers[[i]] = split_pioneers[[i]][1]
}
split_pioneers
split_pioneers = str_split(pioneers, ":")
for (i in split_pioneers) {
split_pioneers[[i]][1] = split_pioneers[[i]][1]
}
split_pioneers
split_pioneers
split_p = str_split(pioneers, ":")
split_pioneers = list()
for (i in split_p) {
split_pioneers[[i]] = split_p[[i]][1]
}
split_pioneers
split_p = str_split(pioneers, ":")
split_p
split_p[[1]][1]
split_p = str_split(pioneers, ":")
split_pioneers = list()
for (i in split_p) {
split_pioneers[i] = split_p[[i]][1]
}
split_pioneers
split_p = str_split(pioneers, ":")
for (i in split_p) {
split_pioneers[i] = split_p[[i]][1]
}
split_pioneers
statisticians = str_to_upper(split_pioneers)
statisticians
split_pioneers = str_split(pioneers, ":")
statisticians = str_to_upper(split_pioneers)
statisticians
split_pioneers = str_split(pioneers, ":[0-9]*")
split_pioneers
split_pioneers = str_replace_all(pioneers, ":[0-9]{4}", "")
split_pioneers
class(split_pioneers)
split_pioneers = str_split(pioneers, ":[0-9]{4}")
split_pioneers
split_pioneers = str_split(pioneers, ":")
split_pioneers
lapply(split_pioneers, str_to_upper)
lapply(split_pioneers, str_to_title)
rbind(statisticians)
pioneers_df = do.call(statisticians, rbind)
pioneers_df = do.call(rbind, statisticians)
pioneers_df = do.call(rbind, split_pioneers)
pioneers_df
split_pioneers = lapply(split_pioneers, str_to_title)
pioneers_df = do.call(rbind, split_pioneers)
pioneers_df
rownames(pioneers_df) = "byear"
colnames(pioneers_df) = "names"
pioneers_df = data.frame(pioneers_df)
rownames(pioneers_df) = "byear"
colnames(pioneers_df) = "names"
pioneers_df = data.frame(pioneers_df)
rownames(pioneers_df) = "byear"
colnames(pioneers_df) = "names"
pioneers_df
pioneers_df = data.frame(pioneers_df)
colnames(pioneers_df) = c("names", "byear")
pioneers_df
as.integer(pioneers_df[,2])
as.integer(pioneers_df$byear[,2])
as.integer(pioneers_df$byear)
pioneers_df$names = as.character(pioneers_df$names)
typeof(pioneers_df$names)
typeof(pioneers_df$byear)
View(sleep)
tapply(group_by(sleep$ID), sleep$group, mean(sleep$extra)
a = tapply(group_by(sleep$ID), sleep$group, mean(sleep$extra))
a
tapply(group_by(sleep$ID), sleep$group, mean(sleep$extra))
sleep
View(sleep)
tapply(sleep, group, mean(sleep$extra))
sleep
tapply(sleep, group, mean)
tapply(sleep, sleep$group, mean)
tapply(sleep, sleep$extra, mean)
tapply(sleep, sleep$extra, mean)
tapply(sleep$group, sleep$extra, mean)
tapply(sleep$ID, sleep$extra, mean)
tapply(sleep$extra, sleep$group, mean)
split(sleep, sleep$ID)
lapply(sleep$ID, function = split)
split(1:10, sleep$ID)
split(sleep, sleep$ID)
lapply(sleep$ID, sort)
lapply(1:10, sort)
lapply('1:10', sort)
lapply(1:10, group_by(sleep$ID))
lapply(1:10, split)
lapply(1:10, mean)
lapply(1:10, function(i)sleep[sleep$ID == i, ])
vapply(split_sleep, with, numeric(1), extra[group == 2] - extra[group == 1])
split_sleep = lapply(1:10, function(i)sleep[sleep$ID == i, ])
vapply(split_sleep, with, numeric(1), extra[group == 2] - extra[group == 1])
View(iris)
select(iris, contains("length"))
select(iris, contains("Petal"))
no_petal = select(iris, contains(!"Petal"))
no_petal = select(iris, ~Petal)
no_petal = select(iris, !Petal)
select(iris, -starts_with("S"))
no_petal = select(iris, -contains("Petal"))
select(iris, -contains("Petal"))
species = select(iris, contains("Species"))
rename(species, "species_name")
names(iris)[names[iris] == "Species"] = "species_name"
names(iris)[names(iris) == "Species"] = "species_name"
species
species = select(iris, contains("Species"))
species = names(iris)[names(iris) == "Species"] = "species_name"
species
species
iris
names(iris)[names(iris) == "Species"] = "species_name"
select(iris, contains("Species"))
add_length = mutate(iris, length_sum = Petal.Length + Sepal.Length)
add_length
only_setosa = filter(iris, species = "setosa")
only_setosa
only_setosa = filter(iris, species = "setosa")
only_setosa = filter(iris, species_name = "setosa")
only_setosa = filter(iris, Species = "setosa")
only_setosa = filter(iris, Species == "setosa")
only_setosa = filter(iris, species_name == "setosa")
only_setosa
nonsense_filter = filter(iris, species_name == ".*[aeiou]{4}.*"
filter(iris, species_name == ".*[aeiou]{4}.*")
filter(iris, species_name == ".*[aeiou]{4}.*")
filter(iris, species_name == ".*[aeiou]{4}.*")
filter(iris, species_name == "[aeiou]{4}")
nonsense_filter = filter(iris, str_detect(species_name, "[aeiou]{4}"))
nonsense_filter
nonsense_filter = filter(iris, str_detect(species_name, "[aeiou]{4}"))
nonsense_filter
nonsense_filter = filter(iris, str_detect(species_name, "([^aeiou]*[aeiou]){4}[^aeiou]*"))
nonsense_filter
nonsense_filter = filter(nonsense_filter, Sepal.Length + Sepal.Width < 8)
nonsense_filter = filter(nonsense_filter, Sepal.Length + Sepal.Width < 8)
nonsense_filter
add_length = summarise(iris, length_sum = Petal.Length + Sepal.Length)
add_length
length_sum = summarise(iris, length_sum = Petal.Length + Sepal.Length)
length_sum
# Your code
add_length = mutate(iris, length_sum = Petal.Length + Sepal.Length)
iris$length_sum
add_length = mutate(iris, length_sum = Petal.Length + Sepal.Length)
add_length$length_sum
sepal_avg_by_species = summarise(iris, avg_sw = mean(Sepal.Width), avg_sl = mean(Sepal.Length))
sepal_avg_by_species
sepal_avg_by_species = summarise(iris$species_name, avg_sw = mean(Sepal.Width), avg_sl = mean(Sepal.Length))
sepal_avg_by_species
sepal_avg_by_species = group_by(iris, species_name)
sepal_avg_by_species = group_by(iris, species_name)
sepal_avg_by_species = summarise(iris, avg_sw = mean(Sepal.Width), avg_sl = mean(Sepal.Length))
sepal_avg_by_species
group_by(iris, species_name)
sepal_avg_by_species = group_by(iris, species_name)
sepal_avg_by_species = summarise(iris, avg_sw = mean(Sepal.Width), avg_sl = mean(Sepal.Length))
sepal_avg_by_species
sepal_avg_by_species = group_by(iris, species_name)
sepal_avg_by_species = summarise(sepal_avg_by_species, avg_sw = mean(Sepal.Width), avg_sl = mean(Sepal.Length))
sepal_avg_by_species
nonsense_filter = filter(iris, species_name, "([^aeiou]*[aeiou]){4}[^aeiou]*")
nonsense_filter = filter(iris, species_name == "([^aeiou]*[aeiou]){4}[^aeiou]*")
nonsense_filter = filter(iris, species_name == "([^aeiou]*[aeiou]){4}[^aeiou]*")
nonsense_filter = filter(nonsense_filter, Sepal.Length + Sepal.Width < 8)
nonsense_filter
nonsense_filter = filter(iris, species_name == "([^aeiou]*[aeiou]){4}[^aeiou]*")
nonsense_filter = filter(nonsense_filter, Sepal.Length + Sepal.Width < 8)
nonsense_filter
nonsense_filter = filter(iris, species_name == "([^aeiou]*[aeiou]){4}[^aeiou]*")
nonsense_filter = filter(nonsense_filter, Sepal.Length + Sepal.Width < 8)
nonsense_filter
nonsense_filter = filter(iris, species_name == "([^aeiou]*[aeiou]){4}[^aeiou]*")
nonsense_filter
nonsense_filter = filter(iris, species_name, "([^aeiou]*[aeiou]){4}[^aeiou]*")
nonsense_filter = filter(iris, species_name == "([^aeiou]*[aeiou]){4}[^aeiou]*")
nonsense_filter
nonsense_filter = filter(iris, species_name == "([^aeiou]*[aeiou]){4}[^aeiou]*")
nonsense_filter = filter(nonsense_filter, Sepal.Length + Sepal.Width < 8)
nonsense_filter
mutate(iris, Sepal.Width = ifelse(Sepal.Width > 3, "wide", "narrow"))
iris
nonsense_filter = filter(iris, str_detect(species_name, "([^aeiou]*[aeiou]){4}[^aeiou]*"))
nonsense_filter = filter(nonsense_filter, Sepal.Length + Sepal.Width < 8)
nonsense_filter
factorized = mutate(iris, Sepal.Width = ifelse(Sepal.Width > 3, "wide", "narrow"))
factorized = mutate(factorized, Sepal.Width = ifelse(Sepal.Length > 5.5, "long", "short"))
factorized
factorized = mutate(iris, Sepal.Width = ifelse(Sepal.Width > 3, "wide", "narrow"))
factorized
factorized = mutate(iris, Sepal.Width = ifelse(Sepal.Width > 3, "wide", "narrow"), Sepal.Width = ifelse(Sepal.Length > 5.5, "long", "short"))
factorized
factorized = mutate(iris, Sepal.Width = ifelse(Sepal.Width > 3, "wide", "narrow"))
factorized = mutate(factorized, Sepal.Width = ifelse(Sepal.Length > 5.5, "long", "short"))
factorized
factorized = mutate(iris, Sepal.Width = ifelse(Sepal.Width > 3, "wide", "narrow"), Sepal.length = ifelse(Sepal.Length > 5.5, "long", "short"))
factorized
group_by(factorized, Sepal.length, Petal.Width)
tally()
tally(group_by(factorized, Sepal.length, Petal.Width))
special_counts = tally(group_by(factorized, Sepal.length, Petal.Width))
special_counts
special_counts = tally(group_by(factorized, Sepal.length, Sepal.Width))
special_counts
special_counts = tally(group_by(factorized, Sepal.Width, Sepal.Length))
special_counts
factorized = mutate(iris,
Sepal.Width = ifelse(Sepal.Width > 3, "wide", "narrow"),
Sepal.Length = ifelse(Sepal.Length > 5.5, "long", "short"))
factorized
special_counts = tally(group_by(factorized, Sepal.Width, Sepal.Length))
special_counts
special_counts = summarise(group_by(factorized, Sepal.Width, Sepal.Length))
special_counts
