knitr::opts_chunk$set(echo = TRUE)
MyVar = function(x){
variance = var(x)
return(variance)
}
MyVar(c(1, 2, 3, 4, 5))
MyVar = function(x){
var(x)
}
MyVar(c(1, 2, 3, 4, 5))
zeroes = function(a, b, c){
if((square(b) - 4*a*c) < 0){
stop("This polynomial has no real roots.")}
elseif((sqr(b) - 4*a*c) == 0){
root = (-b / (2*a))
return(root)
}
else{
root = c((-b + sqrt(square(b) - 4*a*c))/(2*a), (-b - sqrt(square(b) - 4*a*c))/(2*a)  )
return(root)
}
}
zeroes = function(a, b, c){
if((square(b) - 4*a*c) < 0){
stop("This polynomial has no real roots.")}
else if((sqr(b) - 4*a*c) == 0){
root = (-b / (2*a))
return(root)
}
else{
root = c((-b + sqrt(square(b) - 4*a*c))/(2*a), (-b - sqrt(square(b) - 4*a*c))/(2*a)  )
return(root)
}
}
zeroes(1, 0, 0)
zeroes(1, 0, 1)
zeroes(1, 1, 1)
zeroes = function(a, b, c){
if((b^2 - 4*a*c) < 0){
stop("This polynomial has no real roots.")}
else if((b^2 - 4*a*c) == 0){
root = (-b / (2*a))
return(root)
}
else{
root = c((-b + sqrt(b^2 - 4*a*c))/(2*a), (-b - sqrt(b^2 - 4*a*c))/(2*a)  )
return(root)
}
}
zeroes(1, 0, 0)
zeroes(1, 0, 1)
zeroes(1, 1, 1)
zeroes(7, 6, 5)
zeroes(1, 6, 5)
ConvertTemperature = function(degree, unit){
if(unit == "Celsius" | unit == "celsius"){
ret = (degree - 32) * (5/9)
return(ret)
}
else if(unit == "Kelvin" | unit == "kelvin"){
ret = (degree + 459.67) *(5/9)
return(ret)}
else if(unit == "Rankine" | unit == "rankine"){
ret = degree + 459.67
return(ret)
}
else{
stop("we couldn't convert into this unit.")
}
}
ConvertTemperature(32, "Celsius")
ConvertTemperature(32, "kelvin")
ConvertTemperature(100, "Celsius")
ConvertTemperature(32, "kelvin")
ConvertTemperature(212, "kelvin")
```{r}
ConvertTemperature = function(degree, unit){
if(unit == "Celsius" | unit == "celsius"){
ret = (degree - 32) * (5/9)
return(ret)
}
else if(unit == "Kelvin" | unit == "kelvin"){
ret = (degree + 459.67) *(5/9)
return(ret)}
else if(unit == "Rankine" | unit == "rankine"){
ret = degree + 459.67
return(ret)
}
else{
stop("we couldn't convert into this unit.")
}
}
```
Test your function
```{r, eval = F}
ConvertTemperature(32, "Celsius") == 0
ConvertTemperature(212, "Kelvin") == 373.15
ConvertTemperature(10, "Rankine") == 501.67
```
ConvertTemperature(32, "Celsius") == 0
ConvertTemperature(212, "Kelvin") == 373.15
ConvertTemperature(10, "Rankine") == 501.67
ConvertTemperature = function(degree, unit){
if(unit == "Celsius" | unit == "celsius"){
ret = (degree - 32) * (5/9)
return(ret)
}
else if(unit == "Kelvin" | unit == "kelvin"){
ret = (degree + 459.67) *(5/9)
return(ret)}
else if(unit == "Rankine" | unit == "rankine"){
ret = degree + 459.67
return(ret)
}
else{
stop("we couldn't convert into this unit.")
}
}
ConvertTemperature(212, "Kelvin")
ConvertTemperature(212, "Kelvin") == 373.15
ConvertTemperature(10, "Rankine") == 501.67
ConvertTemperature = function(degree, unit){
if(unit == "Celsius" | unit == "celsius"){
ret = (degree - 32) * (5/9)
return(round(ret, digit = 2))
}
else if(unit == "Kelvin" | unit == "kelvin"){
ret = (degree + 459.67) *(5/9)
return(round(ret, digit = 2))}
else if(unit == "Rankine" | unit == "rankine"){
ret = degree + 459.67
return(round(ret, digit = 2))
}
else{
stop("we couldn't convert into this unit.")
}
}
ConvertTemperature(32, "Celsius") == 0
ConvertTemperature(212, "Kelvin") == 373.15
ConvertTemperature(10, "Rankine") == 501.67
ConvertTemperature(10, "Rankine")
sample(x = vector_to_be_sampled, size, replace = FALSE, prob = NULL)
pmax(c(1, 5, 3))
pmax(c(1, 5, 3))
pmax(c(2, 4, 2))
pmax(c(1, 5, 3), c(2, 4, 2))
max(c(1, 5, 3), c(2, 4, 2))
seq(1, 10) = 0
seq(10)
AdvRoll = function(sides, n){
ret = seq(n)
for(num in ret){
num = max(sample(seq(sides), sides, replace = TRUE, prob = NULL), sample(seq(sides), sides, replace = TRUE, prob = NULL))
}
}
AdvRoll(6, 5)
AdvRoll = function(sides, n){
ret = seq(n)
for(num in ret){
num = max(sample(seq(sides), sides, replace = TRUE, prob = NULL), sample(seq(sides), sides, replace = TRUE, prob = NULL))
}
return(ret)
}
AdvRoll(6, 5)
AdvRoll = function(sides, n){
ret = seq(n)
for(i in ret){
num = max(sample(seq(sides), sides, replace = TRUE, prob = NULL), sample(seq(sides), sides, replace = TRUE, prob = NULL))
ret[i] = num
}
return(ret)
}
AdvRoll(6, 5)
sample(1:6, 5, replace = TRUE, prob = NULL)
sample(1:6, 6, replace = TRUE, prob = NULL)
AdvRoll = function(sides, n){
ret = seq(n)
for(i in ret){
num = max(sample(seq(sides), 1, replace = TRUE, prob = NULL), sample(seq(sides), 1, replace = TRUE, prob = NULL))
ret[i] = num
}
return(ret)
}
AdvRoll(6, 5)
AdvRoll(18, 1000)
AdvRoll = function(sides, n){
ret = seq(n)
for(i in ret){
roll_1 = sample(seq(sides), 1, replace = TRUE, prob = NULL)
roll_2 =  sample(seq(sides), 1, replace = TRUE, prob = NULL)
num = max(roll_1, roll_2)
ret[i] = num
}
return(ret)
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
MySummary = function(x){
sprintf("mean: %f\n
median: %f\n
mode: %f\n
sum: %f\n
sum of squares: $f\n", meanx(x), median(x), getmode(x), sum(x), sum(x^2))
}
MySummary(c(1,2,3,4,5))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
MySummary = function(x){
sprintf("mean: %f\n
median: %f\n
mode: %f\n
sum: %f\n
sum of squares: $f\n", mean(x), median(x), getmode(x), sum(x), sum(x^2))
}
MySummary(c(1,2,3,4,5))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
MySummary = function(x){
sprintf("mean: %f
median: %f
mode: %f
sum: %f
sum of squares: $f", mean(x), median(x), getmode(x), sum(x), sum(x^2))
}
MySummary(c(1,2,3,4,5))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
MySummary = function(x){
sprintf("mean: %f\n median: %f, mode: %f, sum: %f, sum of squares: $f", mean(x), median(x), getmode(x), sum(x), sum(x^2))
}
MySummary(c(1,2,3,4,5))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
MySummary = function(x){
sprintf("mean: %f, median: %f, mode: %f, sum: %f, sum of squares: $f", mean(x), median(x), getmode(x), sum(x), sum(x^2))
}
MySummary(c(1,2,3,4,5))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
MySummary = function(x){
sprintf("mean: %f, median: %f, mode: %f, sum: %f, sum of squares: $f", mean(x), median(x), getmode(x), sum(x), sum(x^2))
}
MySummary(c(1,2,3,4,5))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
MySummary = function(x){
sprintf("mean: %f, median: %f, mode: %f, sum: %f, sum of squares: %f", mean(x), median(x), getmode(x), sum(x), sum(x^2))
}
MySummary(c(1,2,3,4,5))
MySummary(AdvRoll(6, 1000))
AdvRoll(6, 1000)
Test your function:
zeroes(1, 0, 0)
zeroes(1, 0, 1)
zeroes(1, 1, 1)
zeroes(1, 6, 5)
