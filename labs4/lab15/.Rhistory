stations = read_csv("dc_stations.csv")
trips = read_csv("2014q4_trips.csv")
sstations = stations %>%
select(sstation = name, slat = lat, slong = long)
estations = stations %>%
select(estation = name, elat = lat, elong = long)
crossing(sstations, estations)
setwd("~/Dropbox/Stats133/git/hw4")
stations = read_csv("dc_stations.csv")
trips = read_csv("2014q4_trips.csv")
sstations = stations %>%
select(sstation = name, slat = lat, slong = long)
estations = stations %>%
select(estation = name, elat = lat, elong = long)
crossing(sstations, estations)
source("haversine.R")
library(readr)
library(stringr)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
stations = read_csv("dc_stations.csv")
trips = read_csv("2014q4_trips.csv")
sstations = stations %>%
select(sstation = name, slat = lat, slong = long)
estations = stations %>%
select(estation = name, elat = lat, elong = long)
crossing(sstations, estations)
stations = read_csv("dc_stations.csv")
trips = read_csv("2014q4_trips.csv")
sstations = stations %>%
select(sstation = name, slat = lat, slong = long)
estations = stations %>%
select(estation = name, elat = lat, elong = long)
crossed = crossing(sstations, estations)
crossed
haversine(slat, slong, elat, elong)
crossed %>%
haversine(slat, slong, elat, elong)
crossed %>%
haversine(slat, slong, elat, elong)
crossed %>%
haversine(as.numeric(slat), as.numeric(slong), as.numeric(elat), as.numeric(elong))
crossed = crossed %>%
mutate(distance = haversine(slat, slong, elat, elong))
crossed
View(trips)
merge(trips, crossed, all.x=TRUE)
stations = read_csv("dc_stations.csv")
trips = read_csv("2014q4_trips.csv")
sstations = stations %>%
select(sstation = name, slat = lat, slong = long)
estations = stations %>%
select(estation = name, elat = lat, elong = long)
crossed = crossing(sstations, estations)
crossed = crossed %>%
mutate(distance = haversine(slat, slong, elat, elong))
dat = left_join(trips, crossed, all.x=TRUE)
dat
View(dat)
sstations = stations %>%
select(sstation = name, slat = lat, slong = long)
estations = stations %>%
select(estation = name, elat = lat, elong = long)
crossed = crossing(sstations, estations)
crossed = crossed %>%
mutate(distance = haversine(slat, slong, elat, elong))
dat = left_join(trips, crossed, all.x=TRUE) %>%
ggplot() + geom_density(aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Temporal Trends in Bike Usage") + scale_x_continuous(name = "Time of Day", breaks = seq(0, 24, by = 4))
ggplot() + geom_density(aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Temporal Trends in Bike Usage") + scale_x_continuous(name = "Time of Day", breaks = seq(0, 24, by = 4))
crossed = crossed %>%
mutate(distance = haversine(slat, slong, elat, elong)) %>%
mutate(weekend = ifelse(wday(sdate) == 1 | wday(sdate) == 7, "Weekend", "Weekday"))
dat = left_join(trips, crossed, all.x=TRUE) %>%
ggplot() + geom_density(aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Temporal Trends in Bike Usage") + scale_x_continuous(name = "Time of Day", breaks = seq(0, 24, by = 4))
sstations = stations %>%
select(sstation = name, slat = lat, slong = long)
estations = stations %>%
select(estation = name, elat = lat, elong = long)
crossed = crossing(sstations, estations)
crossed = crossed %>%
mutate(distance = haversine(slat, slong, elat, elong)) %>%
trips %>%
mutate(weekend = ifelse(wday(sdate) == 1 | wday(sdate) == 7, "Weekend", "Weekday"))
sstations = stations %>%
select(sstation = name, slat = lat, slong = long)
estations = stations %>%
select(estation = name, elat = lat, elong = long)
crossed = crossing(sstations, estations)
crossed = crossed %>%
mutate(distance = haversine(slat, slong, elat, elong)) %>%
trips = trips %>%
mutate(weekend = ifelse(wday(sdate) == 1 | wday(sdate) == 7, "Weekend", "Weekday"))
dat = left_join(trips, crossed, all.x=TRUE) %>%
ggplot() + geom_density(aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Station ") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
ggplot() + geom_density(aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Station ") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
ggplot(dat) + geom_density(aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Station ") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
stations = read_csv("dc_stations.csv")
trips = read_csv("2014q4_trips.csv")
sstations = stations %>%
select(sstation = name, slat = lat, slong = long)
estations = stations %>%
select(estation = name, elat = lat, elong = long)
crossed = crossing(sstations, estations)
crossed = crossed %>%
mutate(distance = haversine(slat, slong, elat, elong)) %>%
trips = trips %>%
mutate(weekend = ifelse(wday(sdate) == 1 | wday(sdate) == 7, "Weekend", "Weekday"))
dat = left_join(trips, crossed, all.x=TRUE)
ggplot(dat) + geom_density(aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Station ") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
ggplot(dat) + geom_density(aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Station ") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
ggplot() + geom_density(data, aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Station ") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
dat
ggplot() + geom_density(dat, aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Station ") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
dat = left_join(trips, crossed, all.x=TRUE)
ggplot() + geom_density(dat, aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Station ") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
df = left_join(trips, crossed, all.x=TRUE)
ggplot() + geom_density(df, aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Station ") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
sstations = stations %>%
select(sstation = name, slat = lat, slong = long)
estations = stations %>%
select(estation = name, elat = lat, elong = long)
crossed = crossing(sstations, estations)
crossed = crossed %>%
mutate(distance = haversine(slat, slong, elat, elong)) %>%
trips = trips %>%
mutate(weekend = ifelse(wday(sdate) == 1 | wday(sdate) == 7, "Weekend", "Weekday"))
df = left_join(trips, crossed, all.x=TRUE)
df
crossed
crossed = crossed %>%
mutate(distance = haversine(slat, slong, elat, elong))
trips = trips %>%
mutate(weekend = ifelse(wday(sdate) == 1 | wday(sdate) == 7, "Weekend", "Weekday"))
crossed
df = left_join(trips, crossed, all.x=TRUE)
df
ggplot() + geom_density(df, aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Station ") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
df
ggplot(df) + geom_density(aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Station ") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
ggplot(df) + geom_density(aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Station ") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
ggplot(df) + geom_density(aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Station ") + scale_x_continuous(name = "Distance")
ggplot(df) + geom_density(aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Station ") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
df = left_join(trips, crossed, all.x=TRUE) %>%
filter(distance < 10)
ggplot(df) + geom_density(aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Station ") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
ggplot(df) + geom_density(aes(x = distance, fill = client), alpha = 0.3 color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Stations") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
ggplot(df) + geom_density(aes(x = distance, fill = client), alpha = 0.3 color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Stations") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
ggplot(df) + geom_density(aes(x = distance, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Stations") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
ggplot(df) + geom_density(aes(x = distance, fill = client), color = NA, alpha = 0.3) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Stations") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
trips %>%
mutate(weekend = ifelse(wday(sdate) == 1 | wday(sdate) == 7, "Weekend", "Weekday")) %>%
mutate(timedata = hour(sdate) + minute(sdate) / 60 + second(sdate) / 3600) %>%
ggplot() + geom_density(aes(x = timedata, fill = client, alpha = 0.3), color = NA) + facet_wrap(~weekend) +
ggtitle("Temporal Trends in Bike Usage") + scale_x_continuous(name = "Time of Day", breaks = seq(0, 24, by = 4))
ggplot(df) + geom_density(aes(x = distance, fill = client), color = NA, alpha = 0.3) + facet_wrap(~weekend) +
ggtitle("Distance Between End and Start Stations") + scale_x_continuous(name = "Distance", breaks = seq(0, 10, by = 2.5))
install.packages(xml2)
install.packages("xml2")
setwd("~/Dropbox/Stats133/stats133/labs4/lab15")
f = read_xml("lab15_1.xml")
xml_attr(f, "name")
library(xml2)
read_xml(path_to_xml_file)
weather <- read_xml("weather.xml")
f = read_xml("lab15_1.xml")
xml_attr(f, "name")
f = read_xml("lab15_2.xml")
xml_attr(f, "\\linklist[@name = "a"]")
f = read_xml("lab15_2.xml")
xml_attr(f, "\\linklist[@name = "a"])
xml_attr(f, "\\linklist[@name = "A"]")
xml_attr(f, "\\linklist[@name = 'A']")
xml_find_all(f, "\\linklist[@name = 'A']")
xml_find_all(f, "\\linklist[@name = 'A']")
f = read_xml("lab15_2.xml")
xml_find_all(f, "\\linklist[@name = 'A']")
f = read_xml("lab15_2.xml")
xml_find_all(f, "//linklist[@name = 'A']")
f = read_xml("lab15_2.xml")
xml_find_all(f, "//linklist[@name = 'A']")
x = read_xml("lab15_2.xml")
xml_find_all(x, "//linkList[@name = 'A']")
f = read_xml("lab15_2.xml")
xml_find_all(f, "//linkList[@name = 'A']")
f = read_xml("lab15_3.xml")
xml_find_all(f,"//jobs[@priority = 'critical' or @priority = 'high']" )
f = read_xml("lab15_3.xml")
xml_find_all(f, "//job[@priority = 'critical' or @priority = 'high']" )
f = read_xml("lab15_4.xml")
xml_find_all(f, "//person[@age > 25]")
f = read_xml("lab15_5.xml")
xml_find_all(f, "/collection/artist/name")
f = read_xml("lab15-p2.xml")
xml_find_all(f, "//prices")
xml_find_all(f, "//prices")
xml_find_all(f, "//price")
xml_find_all(f, "//pages/..")
xml_find_all(f, //title[../price<20])
xml_find_all(f, //title[../price<20)]
xml_find_all(f, "//title[../price<20)]")
xml_find_all(f, "//title[../price<20]")
xml_find_all(f, "//authors[../title[@lang != "en"]]")
xml_find_all(f, "//authors[../title[@lang != 'en']]")
xml_find_all(f, "//author[../title[@lang != 'en']]")
# <Your Code>
link <- "http://www.ecb.europa.eu/stats/eurofxref/eurofxref-hist-90d.xml"
read_xml(link)
exrate_root = xml_root(dat)
exrate.xml <- xml_ns_strip(exrate.xml)
xml_find_all(exrate.xml, "/gesmes:Envelope") #remove the namespaces
link <- "http://www.ecb.europa.eu/stats/eurofxref/eurofxref-hist-90d.xml"
exrate.xml = read_xml(link)
exrate.xml <- xml_ns_strip(exrate.xml)
xml_find_all(exrate.xml, "/gesmes:Envelope") #remove the namespaces
exrate_root = xml_root(exrate.xml)
exrate_root
first_cube <- xml_children(exrate_root)[[3]]
first_cube
first_time_cube <- exrate_root %>%
xml_children() %>%
.[[3]] %>%
xml_children()
first_time_cube
library(lubridate)
library(lubridate)
exrate_root %>%
xml_find_all('//Cube[@currency="GBP"]') %>%
xml_attr("time") %>%
as.date()
exrate_root %>%
xml_find_all('//Cube[@currency="GBP"]') %>%
xml_attr("time") %>%
ymd()
exrate_root %>%
xml_find_all('//Cube[@currency="GBP"]') %>%
xml_attr("time") %>%
exrate_root %>%
xml_find_all('//Cube[@currency="GBP"]') %>%
xml_attr("time")
exrate_root %>%
xml_find_all('//Cube[@currency="GBP"]') %>%
xml_attr("rate") %>%
as.numeric()
exrate_root %>%
xml_find_all('//Cube[@currency="GBP"]') %>%
xml_attr("rate")
exrate_root %>%
xml_find_all('//Cube[@currency="GBP"]') %>%
xml_attr("time")
exrate_root %>%
xml_find_all('//Cube[@currency="GBP"]/..') %>%
xml_attr("time") %>%
exrate_root %>%
xml_find_all('//Cube[@currency="GBP"]/..') %>%
xml_attr("time")
exrate_root %>%
xml_find_all('//Cube[@time]') %>%
ymd()
exrate_root %>%
xml_find_all('//Cube[@time]')
exrate_root %>%
xml_find_all('/Envelope/Cube/Cube[@time]') %>%
xml_attr("time") %>%
ymd()
exrate_root %>%
xml_find_all('//Cube[@time]') %>%
xml_attr("time") %>%
ymd()
library(ggplot2)
ggplot() + geom_path(aes(x = dates, y = rates))
dates = exrate_root %>%
xml_find_all('//Cube[@time]') %>%  #find all matching node
xml_attr("time") %>% #extract the data from the noede using xml_attr
ymd() #convert it into time data type
rates = exrate_root %>%
xml_find_all('//Cube[@currency="GBP"]') %>%
xml_attr("rate") %>%
as.numeric()
library(ggplot2)
ggplot() + geom_path(aes(x = dates, y = rates))
ggplot() + geom_line(aes(x = dates, y = rates))
ggtitle("Exchange Rates Over Time")
ggplot() + geom_line(aes(x = dates, y = rates))
+ ggtitle("Exchange Rates Over Time") + labs(x = "Date", y = "Exchange Rate (against Euro")
ggplot(aes(x = dates, y = rates)) + geom_line()
+ ggtitle("Exchange Rates Over Time") + labs(x = "Date", y = "Exchange Rate (against Euro")
ggplot(aes(x = dates, y = rates)) + geom_line()
+ ggtitle("Exchange Rates Over Time") + labs(x = "Date", y = "Exchange Rate (against Euro")
ggplot() + geom_path(aes(x = dates, y = rates))
ggplot() + geom_path(aes(x = dates, y = rates)) + ggtitle("Exchange Rates")
ggplot() + geom_path(aes(x = dates, y = rates)) + ggtitle("Exchange Rates Over Time") + labs("x = Date", y = "Exchange Rate (against Euro")
ggplot() + geom_path(aes(x = gbp_dates, y = gbp_rates), color = "red") + ggtitle("Exchange Rates Over Time") + labs("x = Date", y = "Exchange Rate (against Euro")
gbp_dates = exrate_root %>%
xml_find_all('//Cube[@time]') %>%  #find all matching node
xml_attr("time") %>% #extract the data from the noede using xml_attr
ymd() #convert it into time data type
gbp_rates = exrate_root %>%
xml_find_all('//Cube[@currency="GBP"]') %>%
xml_attr("rate") %>%
as.numeric()
ggplot() + geom_path(aes(x = gbp_dates, y = gbp_rates), color = "red") + ggtitle("Exchange Rates Over Time") + labs("x = Date", y = "Exchange Rate (against Euro")
list(4)
exchange_rates = list(rep(0, 4))
list(rep(0, 4))
exchange_rates = list(c(), c(), c(), c())
list(c(), c(), c(), c())
names(exchange_rates) = c("GBP", "USD", "CAD", "JPY")
exchange_rates
GetExchangeRates = function(filename, currency){
exrate_root = xml_root(filename)
pattern = str_c("//Cube[@currenct=\"", currency, "\"]")
rates = exrate_root %>%
xml_find_all(pattern) %>%
xml_attr("rate") %>%
as.numeric()
return(rates)
}
exchange_rates = list(c(), c(), c(), c())
names(exchange_rates) = c("GBP", "USD", "CAD", "JPY")
lapply(exchange_rates, GetExchangeRates, var1 = exrate.xml, var2 = names(exchange_rates))
exchange_rates = list(c(), c(), c(), c())
#names(exchange_rates) = c("GBP", "USD", "CAD", "JPY")
lapply(exchange_rates, GetExchangeRates, var1 = exrate.xml)
exchange_rates = list(c(), c(), c(), c())
#names(exchange_rates) = c("GBP", "USD", "CAD", "JPY")
lapply(exchange_rates, GetExchangeRates, x = exrate.xml)
exchange_rates
names(exchange_rates) = c("GBP", "USD", "CAD", "JPY")
lapply(names(exchange_rates), GetExchangeRates, var1 = exrate.xml)
names(exchange_rates)
lapply(names(exchange_rates), GetExchangeRates, x = exrate.xml)
exchange_rates = list(c(), c(), c(), c())
names(exchange_rates) = c("GBP", "USD", "CAD", "JPY")
names(exchange_rates)
GetExchangeRates = function(filename, currency){
exrate_root = xml_root(filename)
pattern = str_c("//Cube[@currenct=\"", currency, "\"]")
rates = exrate_root %>%
xml_find_all(pattern) %>%
xml_attr("rate") %>%
as.numeric()
return(rates)
}
GetExchangeRates = function(filename, currency){
exrate_root = xml_root(filename)
pattern = str_c("//Cube[@currenct=\'", currency, "']")
rates = exrate_root %>%
xml_find_all(pattern) %>%
xml_attr("rate") %>%
as.numeric()
return(rates)
}
exchange_rates = list(c(), c(), c(), c())
names(exchange_rates) = c("GBP", "USD", "CAD", "JPY")
lapply(names(exchange_rates), GetExchangeRates, x = exrate.xml)
GetExchangeRates(exrate.xml, "USD")
GetExchangeRates = function(filename, currency){
exrate_root = xml_root(filename)
pattern = str_c("//Cube[@currency='", currency, "']")
rates = exrate_root %>%
xml_find_all(pattern) %>%
xml_attr("rate") %>%
as.numeric()
return(rates)
}
GetExchangeRates(exrate.xml, "USD")
exchange_rates = list(c(), c(), c(), c())
names(exchange_rates) = c("GBP", "USD", "CAD", "JPY")
lapply(names(exchange_rates), GetExchangeRates, x = exrate.xml)
exchange_rates = list(c("GBP"), c("USD"), c("CAD"), c("JPY"))
names(exchange_rates) = c("GBP", "USD", "CAD", "JPY")
lapply(names(exchange_rates), GetExchangeRates, x = exrate.xml)
exchange_rates = list(c("GBP"), c("USD"), c("CAD"), c("JPY"))
names(exchange_rates) = c("GBP", "USD", "CAD", "JPY")
lapply(exchange_rates, GetExchangeRates, x = exrate.xml)
exchange_rates
lapply(exchange_rates, GetExchangeRates, var1 = exrate.xml)
exchange_rates = list(c("GBP"), c("USD"), c("CAD"), c("JPY"))
names(exchange_rates) = c("GBP", "USD", "CAD", "JPY")
lapply(exchange_rates, GetExchangeRates)
exchange_rates
GetExchangeRates("USD", exrate.xml)
GetExchangeRates = function(currency, filename){
exrate_root = xml_root(filename)
pattern = str_c("//Cube[@currency='", currency, "']")
rates = exrate_root %>%
xml_find_all(pattern) %>%
xml_attr("rate") %>%
as.numeric()
return(rates)
}
GetExchangeRates("USD", exrate.xml)
GetExchangeRates("GBP", exrate.xml)
exchange_rates = c("GBP", "USD", "CAD","JPY")
names(exchange_rates) = c("GBP", "USD", "CAD", "JPY")
lapply(exchange_rates, GetExchangeRates, exrate.xml)
exchange_rates
df = do.call(data.frame, exchange_rates) %>%
mutate(time = exrate_times)
df
View(df)
df = do.call(data.frame, exchange_rates) %>%
mutate(time = exrate_times)
df
exrate.df = do.call(data.frame, exchange_rates) %>%
mutate(time = exrate_times)
exrate.df
currencies = c("GBP", "USD", "CAD","JPY")
names(currencies) = c("GBP", "USD", "CAD", "JPY")
currencies = lapply(currencies, GetExchangeRates, exrate.xml)
currencies
exrate.df <- do.call(data.frame, currencies)
exrate.df <- mutate(exrate.df, time = exrate_times)
exrate.df
exrate.df <- do.call(data.frame, currencies) %>%
mutate(exrate.df, time = exrate_times)
exrate.df
exrate.df = do.call(data.frame, currencies) %>%
mutate(time = exrate_times)
exrate.df
exrate.df = do.call(data.frame, currencies)
mutate(exrate.df, time = exrate_times)
exrate.df
exrate.df = do.call(data.frame, currencies)
exrate.df = mutate(exrate.df, time = exrate_times)
exrate.df
library(lubridate)
exrate_times = exrate_root %>%
xml_find_all('//Cube[@time]') %>%  #find all matching node
xml_attr("time") %>% #extract the data from the noede using xml_attr
ymd() #convert it into time data type
exrate.df = do.call(data.frame, currencies)
exrate.df = mutate(exrate.df, time = exrate_times)
exrate.df
df2 <- exrate.df %>%
gather(key = Currencies, value = Rate, -time)
ggplot(df2, aes(time, Rate, color = factor(Currencies))) + geom_line()
df2 <- exrate.df %>%
gather(key = Currencies, value = Rate, -time)
ggplot(df2, aes(time, Rate, color = factor(Currencies))) + geom_line()
exrate_root = xml_root(exrate.xml)
